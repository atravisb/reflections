When would you want to use a remote repository rather than keeping all your 
work local?

Using a remote repository would be handy when collaborating on a project with 
other people or if you wanted to work on a project from different computers.

Why might you want to always pull changes manually rather than having Git 
automatically stay up-to-date with your remote repository?

push = sending local repo changes to GitHub
pull = receiving GitHub changes in local repo
Pulling manually allows for greater control in what you bring down into your
local repo.  You only really need to update your local repo when you plan to
work on it and might avoid unnecessary transfers that might occur if pulls
were automated.

Describe the differences between forks, clones, and branches. When would you 
use one instead of another?

Branching is undertaken on a single repository, with two or more branches
sharing the same ancestor code.  You might undertake branching if you want to
experiment with a new feature or try out some significant changes to your code,
without the risk of breaking the existing code.
Cloning involves making a copy of an entire repository.  You might do this to
copy a GitHub repository down to your local computer or to make a new copy of
an existing local repository in a different location on your computer.
Forking is a form of cloning; it occurs on GitHub when one GitHub repository 
is copied to create a new GitHub repository.  You fork to get a copy of the 
code for an existing project on GitHub, without directly affecting that project 
(although you may ultimately contribute your changes back to the original 
codebase by way of a pull request.)

What is the benefit of having a copy of the last known state of the remote 
stored locally?

origin = remote
master = local branch
origin/master = local copy of last known state of the master branch on origin

Since origin/master is a branch, after fetching the latest copy of it you can 
merge it with your local master and then push this back to GitHub (incorporating
any changes to master that have been made locally).  Can also git diff to see
differences between remote and local master.

ANYTHING ELSE??

How would you collaborate without using Git or GitHub? What would be easier, 
and what would be harder?

Without Git or GitHub, you would probably need to have a person who controlled
the code for the project - distributing or making accessible a master version of 
the code periodically (perhaps daily?)  The process would probably have a
larger manual component and be more cumbersome than using Git and GitHub.
Individuals working on the code would probably need to save their own versions
manually as well in between accessing the latest master version.

When would you want to make changes in a separate branch rather than directly 
in master? What benefits does each approach have?

(The workflow when making changes in a separate branch is more complicated than 
working directly in master, especially when you need to stay up-to-date with 
changes others are making. Rather than simply pulling and pushing, you need to 
pull changes into your local master branch, merge the local master into your 
branch (different-oil, in our case), then push your branch to the remote before 
finally merging your branch into master, either locally or on GitHub.)

This would be particularly useful when collaborating with others. It ensures
that other people working on the project can identify changes you've made and,
if desired, review and approve the changes you make before adding them to the
master branch.

